// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kernel
arma::mat kernel(arma::mat x1, arma::mat x2, double b);
RcppExport SEXP _gpss_kernel(SEXP x1SEXP, SEXP x2SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel(x1, x2, b));
    return rcpp_result_gen;
END_RCPP
}
// kernel_symmetric
arma::mat kernel_symmetric(arma::mat x, double b);
RcppExport SEXP _gpss_kernel_symmetric(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_symmetric(x, b));
    return rcpp_result_gen;
END_RCPP
}
// kernel_linear_cpp
arma::mat kernel_linear_cpp(arma::mat x1, arma::mat x2, double sigma_f);
RcppExport SEXP _gpss_kernel_linear_cpp(SEXP x1SEXP, SEXP x2SEXP, SEXP sigma_fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_f(sigma_fSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_linear_cpp(x1, x2, sigma_f));
    return rcpp_result_gen;
END_RCPP
}
// kernel_se_cpp
arma::mat kernel_se_cpp(arma::mat x1, arma::mat x2, double sigma_f, double l);
RcppExport SEXP _gpss_kernel_se_cpp(SEXP x1SEXP, SEXP x2SEXP, SEXP sigma_fSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_f(sigma_fSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_se_cpp(x1, x2, sigma_f, l));
    return rcpp_result_gen;
END_RCPP
}
// kernel_periodic_cpp
arma::mat kernel_periodic_cpp(const arma::mat& x1, const arma::mat& x2, double sigma_f, double l, double p);
RcppExport SEXP _gpss_kernel_periodic_cpp(SEXP x1SEXP, SEXP x2SEXP, SEXP sigma_fSEXP, SEXP lSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_f(sigma_fSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_periodic_cpp(x1, x2, sigma_f, l, p));
    return rcpp_result_gen;
END_RCPP
}
// log_marginal_likelihood_cpp
double log_marginal_likelihood_cpp(const arma::mat& K, const arma::vec& y, double s2);
RcppExport SEXP _gpss_log_marginal_likelihood_cpp(SEXP KSEXP, SEXP ySEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(log_marginal_likelihood_cpp(K, y, s2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpss_kernel", (DL_FUNC) &_gpss_kernel, 3},
    {"_gpss_kernel_symmetric", (DL_FUNC) &_gpss_kernel_symmetric, 2},
    {"_gpss_kernel_linear_cpp", (DL_FUNC) &_gpss_kernel_linear_cpp, 3},
    {"_gpss_kernel_se_cpp", (DL_FUNC) &_gpss_kernel_se_cpp, 4},
    {"_gpss_kernel_periodic_cpp", (DL_FUNC) &_gpss_kernel_periodic_cpp, 5},
    {"_gpss_log_marginal_likelihood_cpp", (DL_FUNC) &_gpss_log_marginal_likelihood_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
